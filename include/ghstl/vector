#pragma once

#include "initializer_list"

namespace ghstl {
	template <typename T>
	class vector {
		T* firstAddr = nullptr;
		T* lastAddr = nullptr;
		void* nextRealign = nullptr;
	public:
		vector() {};
		template<typename T, typename... Ty>
		vector(T next, Ty... args) {
			push_back(next, args...);
		};
		vector(const size_t count) {
			firstAddr = allocate_for(count);
			lastAddr = firstAddr;
			nextRealign = firstAddr + size_bytes(count);
		}
		vector(initializer_list<T> initList) {
			this->firstAddr = initList.first;
			this->lastAddr = initList.last;
		}
		size_t count() {
			if (firstAddr == nullptr)
				return 0;
			return (((size_t)lastAddr) - ((size_t)firstAddr)) / sizeof(T);
		}
		size_t size() {
			return count();
		}
		size_t size_bytes() {
			return size_bytes(count());
		}
		size_t size_bytes(size_t count) {
			return count * sizeof(T);
		}
		T* begin() {
			return firstAddr;
		}
		T* end() {
			return lastAddr;
		}
		void clear() {
			lastAddr = firstAddr;
		}
		T* at(size_t pos) {
			size_t ptrOffset = pos * sizeof(T);
			T* item = (T*)(((size_t)firstAddr) + ptrOffset);
			return item;
		}
		T& operator[](size_t pos) {
			return *this->at(pos);
		}
		T* data() {
			return firstAddr;
		}
		T* allocate_for(size_t count) {
			return (T*)malloc(count * sizeof(T));
		}
		void realign() {
			//Double the element count, and multiply that by the size of a pointer
			//Leaves double the room before needing to realloc
			size_t oldSize = size_bytes();
			size_t newCount = (count()*2) + 1;
			size_t newSize = newCount * sizeof(T);
			T* newFirst = allocate_for(newCount);
			memset(newFirst, 0, newCount);

			//Copy old objects
			memcpy_s(newFirst, newSize, firstAddr, oldSize);

			//set new vals
			firstAddr = newFirst;
			lastAddr = newFirst + oldSize;
			nextRealign = newFirst + newSize;
		}
		template<typename T, typename... Ty>
		void push_back(T val, Ty... args) {
			if (lastAddr + sizeof(T) >= nextRealign) {
				realign();
			}
			*lastAddr = val;
			lastAddr += sizeof(T);

			push_back(args...);
		}
		void push_back(T val) {
			if (lastAddr + sizeof(T) >= nextRealign) {
				realign();
			}
			*lastAddr = val;
			lastAddr += sizeof(T);
		}
		void push_back() {};
		bool remove(long long index) {
			long long count = this->count();
			if (index >= count) {
				//Index is outside of the size like bruh
				return false;
			}

			//Get a pointer to the instance at the desired index
			T* tAtOff = this->at(index);
			//Get a pointer to the next instance after the one at the index
			T* tNextOff = this->at(index + 1);
			//Copy the memory to align the next offset at the current offset
			memcpy_s(tAtOff, lastAddr - tAtOff, tNextOff, lastAddr - tNextOff);
			//Throw away/free the last instance (its now at the index before, so our lastAddr pops up sizeof(T)
			this->lastAddr = this->at(this->count() - 1);

			//We're done
			return true;
		}
	};
#if _WIN64
	static_assert(sizeof(vector<void*>) == 24, "ghstl::vector is the wrong size!");
#elif _WIN32
	static_assert(sizeof(vector<void*>) == 12, "ghstl::vector is the wrong size!");
#endif
};